import asyncio
import aiohttp
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Tuple
import time


class CryptoShakeoutMonitor:
    def __init__(self,
                 exchange_id: str = 'binance',
                 min_volume: float = 50000,
                 check_interval: int = 3600,
                 mode: str = 'TESTING'):  # TESTING, SWING_TRADING, –∏–ª–∏ INTRADAY_TRADING

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        self.timeframes = {
            'SWING_TRADING': {'trend': '1w', 'entry': '1d'},
            'INTRADAY_TRADING': {'trend': '1d', 'entry': '1h'},
            'TESTING': {'trend': '1d', 'entry': '1h'}
        }
        self.current_mode = mode

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('crypto_monitor.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

        self.exchange = getattr(ccxt, exchange_id)()
        self.min_volume = min_volume
        self.check_interval = check_interval

    def calculate_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç MACD –∏ Elder's indicators"""
        try:
            # MACD(12,26,9)
            df['ema12'] = df['close'].ewm(span=12, adjust=False).mean()
            df['ema26'] = df['close'].ewm(span=26, adjust=False).mean()
            df['macd'] = df['ema12'] - df['ema26']
            df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()

            # Elder's favorites settings
            df['center_ema'] = df['close'].ewm(span=26, adjust=False).mean()
            df['short_ema'] = df['close'].ewm(span=12, adjust=False).mean()

            return df
        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}')
            return df

    def analyze_trend(self, symbol: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        try:
            timeframe = self.timeframes[self.current_mode]['trend']
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            df['higher_high'] = df['high'].rolling(window=3).apply(lambda x: x[2] > x[1] > x[0])
            df['higher_low'] = df['low'].rolling(window=3).apply(lambda x: x[2] > x[1] > x[0])
            df['lower_high'] = df['high'].rolling(window=3).apply(lambda x: x[2] < x[1] < x[0])
            df['lower_low'] = df['low'].rolling(window=3).apply(lambda x: x[2] < x[1] < x[0])

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
            last_candles = df.tail(3)

            if last_candles['higher_high'].any() and last_candles['higher_low'].any():
                return 'bullish'
            elif last_candles['lower_high'].any() and last_candles['lower_low'].any():
                return 'bearish'
            return 'neutral'

        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–∞: {str(e)}')
            return 'neutral'

    def detect_shakeout(self, df: pd.DataFrame, trend: str) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤—Å—Ç—Ä—è—Å–∫–∏ —Å —Ç–∏–ø–æ–º —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            df = self.calculate_indicators(df)
            last_row = df.iloc[-1]
            prev_row = df.iloc[-2]

            signal = {
                'is_signal': False,
                'type': None,  # 'LONG' –∏–ª–∏ 'SHORT'
                'price': last_row['close'],
                'macd_value': last_row['macd']
            }

            if trend == 'bullish':
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ª–æ–Ω–≥ –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ
                price_near_ema = last_row['close'] <= last_row['center_ema']
                macd_improving = last_row['macd'] > prev_row['macd']

                if price_near_ema and macd_improving:
                    signal['is_signal'] = True
                    signal['type'] = 'LONG'

            elif trend == 'bearish':
                # –°–∏–≥–Ω–∞–ª –Ω–∞ —à–æ—Ä—Ç –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ
                price_near_ema = last_row['close'] >= last_row['center_ema']
                macd_declining = last_row['macd'] < prev_row['macd']

                if price_near_ema and macd_declining:
                    signal['is_signal'] = True
                    signal['type'] = 'SHORT'

            self.logger.info(f"–¢—Ä–µ–Ω–¥: {trend}, –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal['type']}")
            return signal

        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä—è—Å–∫–∏: {str(e)}')
            return {'is_signal': False, 'type': None}

    # def detect_shakeout2(self, df: pd.DataFrame, trend: str) -> bool:
    #     """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤—Å—Ç—Ä—è—Å–∫–∏"""
    #     try:
    #         df = self.calculate_indicators(df)
    #         last_row = df.iloc[-1]
    #         prev_row = df.iloc[-2]
    #         self.logger.info(f"""
    #         Checking shakeout:
    #         - Price: {last_row['close']}
    #         - EMA: {last_row['center_ema']}
    #         - MACD current: {last_row['macd']}
    #         - MACD previous: {prev_row['macd']}
    #         """)
    #
    #         if trend == 'bullish':
    #             # –¶–µ–Ω–∞ —É —Å—Ä–µ–¥–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–µ + –∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è MACD –Ω–∞—á–∏–Ω–∞–µ—Ç –±–µ–ª–µ—Ç—å
    #             price_near_ema = last_row['close'] <= last_row['center_ema']
    #             macd_improving = last_row['macd'] > prev_row['macd']
    #             self.logger.info(f"""
    #             Bullish conditions:
    #             - Price near EMA: {price_near_ema}
    #             - MACD improving: {macd_improving}
    #             """)
    #             return price_near_ema and macd_improving
    #
    #         elif trend == 'bearish':
    #             # –¶–µ–Ω–∞ —É —Å—Ä–µ–¥–Ω–µ–π –∏–ª–∏ –≤—ã—à–µ + –∑–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è MACD –Ω–∞—á–∏–Ω–∞–µ—Ç –±–µ–ª–µ—Ç—å
    #             price_near_ema = last_row['close'] >= last_row['center_ema']
    #             macd_declining = last_row['macd'] < prev_row['macd']
    #             return price_near_ema and macd_declining
    #
    #         return False
    #
    #     except Exception as e:
    #         self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä—è—Å–∫–∏: {str(e)}')
    #         return False

    async def run_forever(self, alert_callback=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å—Ç—Ä—è—Å–æ–∫...')

        while True:
            try:
                # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
                trend = self.analyze_trend('BTC/USDT')
                self.logger.info(f'–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ BTC: {trend}')

                if trend == 'neutral':
                    self.logger.info('–¢—Ä–µ–Ω–¥ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑')
                    time.sleep(self.check_interval)
                    continue

                # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–ª–∞–¥—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                timeframe = self.timeframes[self.current_mode]['entry']
                ohlcv = self.exchange.fetch_ohlcv('BTC/USDT', timeframe, limit=100)
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

                # 3. –ò—â–µ–º –≤—Å—Ç—Ä—è—Å–∫—É
                signal = self.detect_shakeout(df, trend)

                if signal['is_signal']:
                    message = f"""
    üö® –í—Å—Ç—Ä—è—Å–∫–∞ –Ω–∞ BTC!
    üìà –¢—Ä–µ–Ω–¥: {trend}
    üí∞ –¶–µ–Ω–∞: {signal['price']:.2f}
    üìä –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {'üü¢ LONG' if signal['type'] == 'LONG' else 'üî¥ SHORT'}
    ‚è∞ –í—Ä–µ–º—è: {datetime.now()}

    üîç MACD: {signal['macd_value']:.6f}
    """
                    if alert_callback:
                        await alert_callback(message)
                        self.logger.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –æ –≤—Å—Ç—Ä—è—Å–∫–µ: {signal["type"]}')

                time.sleep(self.check_interval)

            except Exception as e:
                self.logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}')
                time.sleep(60)


async def send_telegram_alert(message):
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/send_message",
                                json={"text": message}) as response:
            await response.json()


async def main():
    monitor = CryptoShakeoutMonitor(
        exchange_id='binance',
        min_volume=50000,
        check_interval=3600,
        mode='TESTING'  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    await monitor.run_forever(alert_callback=send_telegram_alert)


if __name__ == "__main__":
    asyncio.run(main())