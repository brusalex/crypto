import asyncio

import aiohttp
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Tuple
import time

import requests


class CryptoShakeoutMonitor:
    def __init__(self, 
                 exchange_id: str = 'binance',
                 min_volume: float = 50000,
                 check_interval: int = 3600):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        Args:
            exchange_id: –±–∏—Ä–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é binance)
            min_volume: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á
            check_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('../crypto_monitor.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.exchange = getattr(ccxt, exchange_id)()
        self.min_volume = min_volume
        self.check_interval = check_interval
        
        # –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.signals_cache = {
            'last_signal_time': None,
            'last_signal_price': None
        }
        
    def analyze_weekly_trend(self, symbol: str = 'BTC/USDT') -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –Ω–µ–¥–µ–ª—å
            ohlcv = self.exchange.fetch_ohlcv(symbol, '1w', limit=20)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df['ema20'] = df['close'].ewm(span=20, adjust=False).mean()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            current_price = df['close'].iloc[-1]
            ema = df['ema20'].iloc[-1]
            
            if current_price > ema:
                return 'bullish'
            return 'bearish'
            
        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {str(e)}')
            return None

    def detect_shakeout(self, df: pd.DataFrame) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–≤—Å—Ç—Ä—è—Å–∫–∏" –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            # Bollinger Bands –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω—ã —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (2 * bb_std)
            df['bb_lower'] = df['bb_middle'] - (2 * bb_std)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            last_candles = df.iloc[-3:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Å—Ç—Ä—è—Å–∫–∏:
            
            # 1. –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∫ –∑–æ–Ω–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∏–∂–µ
            price_drop = (last_candles['low'].min() <= last_candles['bb_middle'].iloc[-1])
            
            # 2. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Å–∫–æ–∫
            last_candle_recovery = (
                last_candles['close'].iloc[-1] > last_candles['open'].iloc[-1] and
                last_candles['close'].iloc[-1] > last_candles['bb_middle'].iloc[-1]
            )
            
            # 3. –û–±—ä–µ–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            avg_volume = df['volume'].rolling(window=20).mean().iloc[-1]
            high_volume = last_candles['volume'].iloc[-1] > avg_volume
            
            return price_drop and last_candle_recovery and high_volume
            
        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä—è—Å–∫–∏: {str(e)}')
            return False

    def analyze_daily_chart(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            ohlcv = self.exchange.fetch_ohlcv(symbol, '1d', limit=30)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å—Ç—Ä—è—Å–∫–∏
            shakeout_detected = self.detect_shakeout(df)
            
            if shakeout_detected:
                return {
                    'symbol': symbol,
                    'price': df['close'].iloc[-1],
                    'time': df['timestamp'].iloc[-1],
                    'volume': df['volume'].iloc[-1],
                    'is_signal': True
                }
            self.logger.info(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å—Ç—Ä—è—Å–∫–∏ : False')
            return {'is_signal': False}
            
        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}')
            return {'is_signal': False}

    def generate_alert_message(self, signal: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
        try:
            if not signal['is_signal']:
                return None
                
            message = f"""
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Å—Ç—Ä—è—Å–∫–∞ –Ω–∞ {signal['symbol']}!

üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {signal['price']:.2f}
üìä –û–±—ä–µ–º –∑–∞ 24—á: {signal['volume']:.2f} USDT
‚è∞ –í—Ä–µ–º—è: {signal['time']}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
"""
            return message
            
        except Exception as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}')
            return None

    def should_send_signal(self, symbol: str, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª"""
        if not self.signals_cache['last_signal_time']:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        time_passed = datetime.now() - self.signals_cache['last_signal_time']
        if time_passed.total_seconds() < 24 * 3600:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if self.signals_cache['last_signal_price']:
            price_change = abs(current_price - self.signals_cache['last_signal_price']) / self.signals_cache['last_signal_price']
            if price_change < 0.02:  # –º–µ–Ω—å—à–µ 2% –∏–∑–º–µ–Ω–µ–Ω–∏—è
                return False
                
        return True

    def update_signal_cache(self, symbol: str, price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.signals_cache['last_signal_time'] = datetime.now()
        self.signals_cache['last_signal_price'] = price

    async def run_forever(self, alert_callback=None):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            alert_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        """
        self.logger.info('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å—Ç—Ä—è—Å–æ–∫...')
        
        while True:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ BTC
                self.logger.info(f'–ù–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑..')
                weekly_trend = self.analyze_weekly_trend()
                
                if weekly_trend != 'bullish':
                    self.logger.info(f'–ù–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ {weekly_trend}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑')
                    time.sleep(self.check_interval)
                    continue
                
                # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                signal = self.analyze_daily_chart('BTC/USDT')
                
                # 3. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª –∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                if signal['is_signal'] and self.should_send_signal('BTC/USDT', signal['price']):
                    message = self.generate_alert_message(signal)
                    self.logger.info('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Å—Ç—Ä—è—Å–∫–∞ –Ω–∞ BTC')
                    
                    if alert_callback and message:
                        await alert_callback(message)
                        self.update_signal_cache('BTC/USDT', signal['price'])
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}')
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

monitor = CryptoShakeoutMonitor(
    exchange_id='binance',
    min_volume=50000,
    check_interval=3600  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
)

async def send_telegram_alert(message):
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/send_message",
                              json={"text": message}) as response:
            await response.json()

async def main():
    monitor = CryptoShakeoutMonitor(
        exchange_id='binance',
        min_volume=50000,
        check_interval=120
    )
    await monitor.run_forever(alert_callback=send_telegram_alert)

if __name__ == "__main__":
    asyncio.run(main())
